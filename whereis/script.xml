<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <ScriptPackage>
        <Script isActive="yes" isFolder="no">
            <name>whereis</name>
            <packageName></packageName>
            <script>LOCATIONS = {}
LOCATIONS.lookup = false
LOCATIONS.roomName = nil

local jsonDir = getMudletHomeDir() .. &quot;/whereis/loc.json&quot;
if not io.exists(jsonDir) then
	cecho(&quot;&lt;red&gt;Locations data not found.\n&quot;)
	return
end
io.input(jsonDir)
LOCATIONS.data = yajl.to_value(io.read(&quot;*all&quot;))
io.open(jsonDir):close()

function roomsFound (rooms)
	if not table.is_empty(rooms) then	
		cecho(&quot;\n&lt;green&gt;Maybe you want to find: \n&quot;)
		for _, room in pairs(rooms) do
			cecho(string.format(
				&quot;&lt;green&gt;%s(%s): %sx, %sy\n&quot;, 
				room.name, room.continent, room.x, room.y
			))
		end
	end
end
</script>
            <eventHandlerList/>
        </Script>
    </ScriptPackage>
    <AliasPackage>
        <Alias isActive="yes" isFolder="no">
            <name>whereis</name>
            <script>if not LOCATIONS then 
	return
end

LOCATIONS.lookup = true
LOCATIONS.roomName = matches[2]

send(&quot;whereami&quot;, true)</script>
            <command></command>
            <packageName></packageName>
            <regex>^whereis (\w+)$</regex>
        </Alias>
    </AliasPackage>
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>whereis</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
                <string>if LOCATIONS and LOCATIONS.data and LOCATIONS.lookup then return true else return false end</string>
            </regexCodeList>
            <regexCodePropertyList>
                <integer>4</integer>
            </regexCodePropertyList>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>whereis</name>
                <script>local area = string.lower(matches[2])
local x = tonumber(matches[3])
local y = tonumber(matches[4])

if not table.contains(LOCATIONS.data, area) then
	cecho(&quot;&lt;red&gt;Area: &quot; .. area .. &quot; not found.\n&quot;)
	return
end

local found = false
local rooms = LOCATIONS.data[area]
for name, loc in pairs(rooms) do
	if name:find(LOCATIONS.roomName) then
		found = true
		local roomX = tonumber(loc.x)
		local roomY = tonumber(loc.y)
		local distX = math.abs(roomX - x)
		local distY = math.abs(roomY - y)
		local distance = math.sqrt(math.pow(distX, 2) + math.pow(distY, 2))
		local d = (math.asin(distX / distance) / math.pi) * 180
		local result = 0

		if roomX &gt;= x and roomY &lt;= y then
			result = d
		elseif roomX &gt;= x and roomY &gt;= y then
			result = 180 - d
		elseif roomX &lt;= x and roomY &gt;= y then	
			result = 180 + d
		elseif roomX &lt;= x and roomY &lt;= y then
			result = 360 - d
		end

		local hour = math.floor(result / 30)
		local minute = math.floor((result % 30) * 0.5)
		cecho(string.format(
			&quot;\n&lt;green&gt;%s is at %d:%d o'clock, %d steps away.\n&quot;, 
			name, hour, minute, math.floor(distance)
		))
	end
end

if not found then
	cecho(string.format(&quot;\n&lt;red&gt;%s not found in %s.\n&quot;, LOCATIONS.roomName, area))

	local others = {}
	for continent, rooms in pairs(LOCATIONS.data) do
		if continent ~= area then
			for name, location in pairs(rooms) do
				if name:find(LOCATIONS.roomName) then
					table.insert(
						others, 
						{name = name, continent = continent, x = location.x, y = location.y}
					)
				end
			end
		end
	end
	roomsFound(others)
end

LOCATIONS.lookup = false
LOCATIONS.roomName = nil
found = false
</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>^You are.*continent of (\w+)\. \(Coordinates: (\d+)x, (\d+)y;[^\)]*\)</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
        </TriggerGroup>
    </TriggerPackage>
</MudletPackage>
